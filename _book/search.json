[{"path":"index.html","id":"preface","chapter":"Preface","heading":"Preface","text":"started learning GIS 2017 PhD.\nprogramming know, learnt making many mistakes.\nstill make mistakes, means still learning.\naim book guide started learning GIS saved mistakes.\nbook intended newcomers GIS; experienced users definitely look search somewhere else (likely stackoverflow.com).book divided three main parts:\n1. General introduction GIS.\n2. Fundamentals GIS analysis.\n3. GIS analysis Google Earth Engine.","code":""},{"path":"index.html","id":"software-requirements","chapter":"Preface","heading":"Software requirements","text":"first part book, introduce basic concepts GIS using R Python.\n, use terra package R shapely module Python.second part, cover fundamentals GIS analysis.\nexplain theory behind complement examples actual analyses, introducing common workflows R Python.\nuse R package terra Python moduels shapely, geopandas, fiona, plotly.third part, focus Google Earth Engine explain move heavy GIS analyses cloud.\nrequire basic understanding JavaScript Python object-oriented programming, well interface GEE using gee Python module.\npart may seem redunant first (move computation Google servers?), , analyses expand scale need access several databases, GEE shines great trade-complexity effectiveness.install packages modules used book, can use conda environment management system.\nenvironment file https://github.com/emilio-berti/gis-course/blob/master/conda/gis-course.yml.","code":"conda env create --file=gis-course.yml"},{"path":"a-history-of-gis.html","id":"a-history-of-gis","chapter":"A history of GIS","heading":"A history of GIS","text":"GIS started …","code":""},{"path":"projections.html","id":"projections","chapter":"Projections","heading":"Projections","text":"used","code":""},{"path":"shapefiles.html","id":"shapefiles","chapter":"Shapefiles","heading":"Shapefiles","text":"Shapefiles contain geospatial vector data, also called geometries.\nshapefile extension .shp usually accompanied files.\nCommon supplementary files :.shx, contains index geometries data model..dbf, contains attributes geometries table format..prj, contains WKT representation coordinate reference system.core concept shapefiles geographic features stored using three fundamental geometry types:Points, defined coordinates \\((x, y)\\).Lines, defined two points line interpolating .Polygons, defiend several lines.three fundamental types can also “stacked”, e.g. one spatial feature can represented multiple points, lines, polygons.\ncase, talk multipoints, multilines, multipolygons.\ndifference multilines polygons polygon inscribe area space, creates “inside” area “outside” one, multilines .","code":""},{"path":"shapefiles.html","id":"geometries-in-r","chapter":"Shapefiles","heading":"Geometries in R","text":"Let’s see exampled R using package terra.\nRemember load package already: library(terra).\nterra, hustle came older GIS software removed, geometries can simply created using vect() function.creates first geometry, point origin.\nmeaningful, however, must assign coordinate reference system geometry.\ncan done initialization .terra USE FUNDAMENTAL TYPE?Geometries can converted types casting.\nterra, , made extremely easy.\nLet’s create points.cast lines using .lines().may want cast polygons, notice however lines inscribe area space, .e. “closed”.Trying cast lines polygons, return empty geometry.cast lines polygons, two points must identical.want cast points polygons, considered best practice first cast lines cast polygons (just ).\nTrying cast points polygons directly can introduce errors, works .","code":"\nxy <- matrix(c(0, 0), ncol = 2)\npoi <- vect(xy)\ngeomtype(poi)## [1] \"points\"\npoi <- vect(xy, crs = \"EPSG:4326\")\npoi##  class       : SpatVector \n##  geometry    : points \n##  dimensions  : 1, 0  (geometries, attributes)\n##  extent      : 0, 0, 0, 0  (xmin, xmax, ymin, ymax)\n##  coord. ref. : lon/lat WGS 84 (EPSG:4326)\nxy <- matrix(seq_len(10), ncol = 2)\npois <- vect(xy, crs = \"EPSG:4326\")\ngeomtype(pois)## [1] \"points\"\nls <- as.lines(pois)\ngeomtype(ls)## [1] \"lines\"\nplot(ls)\npoints(pois, cex = 2)\npol = as.polygons(ls)\ngeomtype(pol)## [1] \"none\"\nxy <- matrix(seq_len(10), ncol = 2)\nxy <- rbind(xy, cbind(5, 6)) #add bottom-right point\nxy <- rbind(xy, xy[1, ]) #add again first point\npois <- vect(xy, crs = \"EPSG:4326\")\nls <- as.lines(pois)\npol <- as.polygons(ls)\npol##  class       : SpatVector \n##  geometry    : polygons \n##  dimensions  : 1, 0  (geometries, attributes)\n##  extent      : 1, 5, 6, 10  (xmin, xmax, ymin, ymax)\n##  coord. ref. : lon/lat WGS 84 (EPSG:4326)"},{"path":"shapefiles.html","id":"geometries-in-python","chapter":"Shapefiles","heading":"Geometries in Python","text":"Finally, shapely GeometryCollection type store geometries one type.","code":"from shapely.geometry import Point, MultiPoint\n\npoi = Point(0, 0)\npoi.wkt## 'POINT (0 0)'pois = MultiPoint([[0, 0], [0, 1], [1, 1], [1, 0], [0, 0]])\npois.wkt## 'MULTIPOINT (0 0, 0 1, 1 1, 1 0, 0 0)'from shapely.geometry import LineString, LinearRing\n\nls = LineString([[0, 0], [0, 1], [1, 1], [1, 0], [0, 0]])\nlr = LinearRing([[0, 0], [0, 1], [1, 1], [1, 0], [0, 0]])\nls.wkt## 'LINESTRING (0 0, 0 1, 1 1, 1 0, 0 0)'from shapely.geometry import Polygon, MultiPolygon\n\npol = Polygon([[0, 0], [0, 1], [1, 1], [1, 0], [0, 0]])\npols = MultiPolygon([pol for i in range(3)])\npols.wkt## 'MULTIPOLYGON (((0 0, 0 1, 1 1, 1 0, 0 0)), ((0 0, 0 1, 1 1, 1 0, 0 0)), ((0 0, 0 1, 1 1, 1 0, 0 0)))'from shapely.geometry import GeometryCollection\n\ncoll = GeometryCollection([pois, ls, pol])\ncoll.wkt## 'GEOMETRYCOLLECTION (MULTIPOINT (0 0, 0 1, 1 1, 1 0, 0 0), LINESTRING (0 0, 0 1, 1 1, 1 0, 0 0), POLYGON ((0 0, 0 1, 1 1, 1 0, 0 0)))'"}]
